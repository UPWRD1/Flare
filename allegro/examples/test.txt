[src/root/passes/midend/typechecking.rs:215:9] self.env.clone() = Environment {
    file_table: Table {
        entries: {
            (
                1,
                "examples/game.alg",
            ): FileTableEntry {
                path: "examples/game.alg",
                src: "with \"examples/player\"\n\nlet main = \n    p = Player.new(\"Jillip Phones\", Barbarian)\n",
            },
            (
                2,
                "/workspaces/allegro/allegro/examples/player.alg",
            ): FileTableEntry {
                path: "/workspaces/allegro/allegro/examples/player.alg",
                src: "\ntype PlayerClass = enum of\n\tBarbarian(int),\n\tRogue(int),\n\tMage(int)\n\n\ntype Player = struct of \n\tname: str,\n\tlevel: int,\n\thp: int,\n\tclass: PlayerClass\n\n\ndef Player =\n\tlet new of name: str, class: PlayerClass -> Player = \n\t\treturn Player {name: name, level: 0, hp: 10, class: class}\n\t\n\tlet level_up of mut self =\n\t\t-- self = Player {name: self.name, level: self.level + 1, hp: self.hp, class: self.class}\n\t\t-- self.level = self.level + 1\n\t\t1\nend",
            },
        },
    },
    module_table: Table {
        entries: {
            (
                6,
                "game",
            ): ModuleTableEntry {
                imports_from: {},
                id: 6,
            },
            (
                3,
                "player",
            ): ModuleTableEntry {
                imports_from: {},
                id: 3,
            },
        },
    },
    function_table: Table {
        entries: {
            (
                7,
                "main",
            ): FunctionTableEntry {
                name: "main",
                arity: 0,
                args: [],
                limits: [],
                return_type: Generic(
                    "?_c8c7a99bb88e156b",
                ),
                body: [
                    Assignment {
                        name: Symbol(
                            "p",
                        ),
                        value: MethodCall {
                            obj: Symbol(
                                "Player",
                            ),
                            name: Symbol(
                                "new",
                            ),
                            args: [
                                Str(
                                    "\"Jillip Phones\"",
                                ),
                                Symbol(
                                    "Barbarian",
                                ),
                            ],
                        },
                    },
                ],
                is_checked: false,
            },
        },
    },
    usertype_table: Table {
        entries: {
            (
                5,
                "Player",
            ): UserTypeTableEntry {
                name: "Player",
                isdefined: true,
                generics: [],
                methods: [],
                kind: Struct {
                    fields: [
                        (
                            "name",
                            Str,
                        ),
                        (
                            "level",
                            Int,
                        ),
                        (
                            "hp",
                            Int,
                        ),
                        (
                            "class",
                            Custom(
                                "PlayerClass",
                                [],
                            ),
                        ),
                    ],
                },
                is_checked: false,
            },
            (
                4,
                "PlayerClass",
            ): UserTypeTableEntry {
                name: "PlayerClass",
                isdefined: true,
                generics: [],
                methods: [],
                kind: Enum {
                    variants: [
                        Variant(
                            "Barbarian",
                            [
                                Int,
                            ],
                        ),
                        Variant(
                            "Rogue",
                            [
                                Int,
                            ],
                        ),
                        Variant(
                            "Mage",
                            [
                                Int,
                            ],
                        ),
                    ],
                },
                is_checked: false,
            },
        },
    },
    current_variables: Table {
        entries: {},
    },
    current_generics: Table {
        entries: {},
    },
    currentfreeid: 7,
}